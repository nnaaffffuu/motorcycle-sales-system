/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import database.CustomersTable;
import database.DatabaseConnection;
import database.DatabaseResultSet;
import database.DateAndTime;
import database.InstallmentsTable;
import database.InventoryTable;
import database.LoginHistoryTable;
import database.SalesReportTable;
import database.UniqueIDGenerator;
import database.UsersTable;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nnaaf
 */
public class MenuUI extends javax.swing.JFrame {

    // Declare variables
    private int currentUserRow;
    private int currentUserID;
    private String currentUserFullName;
    private String currentUserRole;

    // Method to assign values to the above variables from the login history table
    // The information in the last row is taken
    private void setCurrentUserIDAndFullName() {
        try {
            con = DatabaseConnection.connectToDatabase();
            ps = con.prepareStatement("SELECT row, id, full_name, role FROM login_history WHERE row = (SELECT MAX(row) FROM login_history)");
            rs = ps.executeQuery();

            while (rs.next()) {
                currentUserRow = rs.getInt(1);
                currentUserID = rs.getInt(2);
                currentUserFullName = rs.getString(3);
                currentUserRole = rs.getString(4);
                break;
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {   // Prevents "A lock could not be obtained within the time requested" error
            try {
                rs.close();
                ps.close();
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void showSettingsButtonBasedOnRole() {
        if (currentUserRole.equals("Administrator")) {
            settingsButton.setVisible(true);
        }
    }

    /**
     * Creates new form MenuUI
     */
    public MenuUI() {
        initComponents();
        displayDateAndTime();                // Displays date and time
        setCurrentUserIDAndFullName();       // Use the above method to assign vales to the variables
        displayCurrentUser();                // Displays the current user information stored in the above variables
        tableDesign();
        refreshAllTables();                  // Populates all the jTables
        setComponentsInvisibleAtstart();
        showSettingsButtonBasedOnRole();
        populateBrandComboBox();
        setJTextFieldLimit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        logoutButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        homeButton = new javax.swing.JButton();
        salesButton = new javax.swing.JButton();
        inventoryButton = new javax.swing.JButton();
        customersButton = new javax.swing.JButton();
        installmentsButton = new javax.swing.JButton();
        salesReportButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        dateTimeLabel = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        switchPanel = new javax.swing.JPanel();
        homeScrollPane = new javax.swing.JScrollPane();
        homePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        salesScrollPane = new javax.swing.JScrollPane();
        salesPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        customerIDField = new javax.swing.JFormattedTextField();
        jLabel35 = new javax.swing.JLabel();
        payingInComboBox = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        paidAmountField = new javax.swing.JTextField();
        discountSpinner = new javax.swing.JSpinner();
        jLabel38 = new javax.swing.JLabel();
        monthsSpinner = new javax.swing.JSpinner();
        monthsLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        sellButton = new javax.swing.JButton();
        clearSalesPanelButton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JSeparator();
        salesTableSearchField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        salesTable = new javax.swing.JTable();
        inventoryScrollPane = new javax.swing.JScrollPane();
        inventoryPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        inventoryTableSearchField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel7 = new javax.swing.JPanel();
        addMotorcyclesButton = new javax.swing.JButton();
        updateMotorcyclesButton = new javax.swing.JButton();
        deleteMotorcyclesButton = new javax.swing.JButton();
        clearInventoryPanelButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane8 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        brandField = new javax.swing.JTextField();
        modelNoField = new javax.swing.JTextField();
        modelNameField = new javax.swing.JTextField();
        chassisNoField = new javax.swing.JTextField();
        engineNoField = new javax.swing.JTextField();
        engineCapacityField = new javax.swing.JTextField();
        colourField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        brandComboBox = new javax.swing.JComboBox<>();
        manuYearField = new javax.swing.JFormattedTextField();
        jLabel34 = new javax.swing.JLabel();
        customersScrollPane = new javax.swing.JScrollPane();
        customersPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        customersTableSearchField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jPanel9 = new javax.swing.JPanel();
        addCustomersButton = new javax.swing.JButton();
        updateCustomersButton = new javax.swing.JButton();
        deleteCustomersButton = new javax.swing.JButton();
        clearCustomersPanelButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        jSeparator6 = new javax.swing.JSeparator();
        jScrollPane9 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        nidField = new javax.swing.JTextField();
        customerFullNameField = new javax.swing.JTextField();
        dobField = new javax.swing.JFormattedTextField();
        addressField = new javax.swing.JTextField();
        phoneNoField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        accountNoField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        ridingZoneField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        installmentsScrollPane = new javax.swing.JScrollPane();
        installmentsPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator9 = new javax.swing.JSeparator();
        installmentsPaidAmountField = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        payButton = new javax.swing.JButton();
        clearInstallmentPanelButton = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JSeparator();
        installmentsTableSearchField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        installmentsTable = new javax.swing.JTable();
        salesReportScrollPane = new javax.swing.JScrollPane();
        salesReportPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        salesReportTableSearchField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        salesReportTable = new javax.swing.JTable();
        settingsScrollPane = new javax.swing.JScrollPane();
        settingsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        usersButton = new javax.swing.JButton();
        loginHistoryButton = new javax.swing.JButton();
        settingsSwitchPanel = new javax.swing.JPanel();
        usersPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        userFullNameField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        roleComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusComboBox = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        addUsersButton = new javax.swing.JButton();
        updateUsersButton = new javax.swing.JButton();
        deleteUsersButton = new javax.swing.JButton();
        clearUsersPanelButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        usersTableSearchField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        loginHistoryPanel = new javax.swing.JPanel();
        loginHistoryTableSearchField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        loginHistoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Motorcycle Sales System");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(38, 198, 218));

        jPanel2.setBackground(new java.awt.Color(0, 137, 123));

        logoutButton.setBackground(new java.awt.Color(0, 137, 123));
        logoutButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(255, 255, 255));
        logoutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-logout-rounded-left-30.png"))); // NOI18N
        logoutButton.setText("     Logout");
        logoutButton.setContentAreaFilled(false);
        logoutButton.setFocusPainted(false);
        logoutButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        logoutButton.setOpaque(true);
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                logoutButtonMousePressed(evt);
            }
        });
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(0, 137, 123));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeButton.setBackground(new java.awt.Color(38, 166, 154));
        homeButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        homeButton.setForeground(new java.awt.Color(255, 255, 255));
        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-home-30.png"))); // NOI18N
        homeButton.setText("     Home");
        homeButton.setContentAreaFilled(false);
        homeButton.setFocusPainted(false);
        homeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        homeButton.setOpaque(true);
        homeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                homeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                homeButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                homeButtonMousePressed(evt);
            }
        });
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        jPanel6.add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 250, -1));

        salesButton.setBackground(new java.awt.Color(0, 137, 123));
        salesButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        salesButton.setForeground(new java.awt.Color(255, 255, 255));
        salesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-shopping-cart-30.png"))); // NOI18N
        salesButton.setText("     Sales");
        salesButton.setContentAreaFilled(false);
        salesButton.setFocusPainted(false);
        salesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        salesButton.setOpaque(true);
        salesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                salesButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                salesButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                salesButtonMousePressed(evt);
            }
        });
        salesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesButtonActionPerformed(evt);
            }
        });
        jPanel6.add(salesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 250, -1));

        inventoryButton.setBackground(new java.awt.Color(0, 137, 123));
        inventoryButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        inventoryButton.setForeground(new java.awt.Color(255, 255, 255));
        inventoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-in-inventory-30.png"))); // NOI18N
        inventoryButton.setText("     Inventory");
        inventoryButton.setContentAreaFilled(false);
        inventoryButton.setFocusPainted(false);
        inventoryButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        inventoryButton.setOpaque(true);
        inventoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                inventoryButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                inventoryButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                inventoryButtonMousePressed(evt);
            }
        });
        inventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inventoryButtonActionPerformed(evt);
            }
        });
        jPanel6.add(inventoryButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 250, -1));

        customersButton.setBackground(new java.awt.Color(0, 137, 123));
        customersButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        customersButton.setForeground(new java.awt.Color(255, 255, 255));
        customersButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-customer-30.png"))); // NOI18N
        customersButton.setText("     Customers");
        customersButton.setContentAreaFilled(false);
        customersButton.setFocusPainted(false);
        customersButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        customersButton.setOpaque(true);
        customersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                customersButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                customersButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                customersButtonMousePressed(evt);
            }
        });
        customersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customersButtonActionPerformed(evt);
            }
        });
        jPanel6.add(customersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 250, -1));

        installmentsButton.setBackground(new java.awt.Color(0, 137, 123));
        installmentsButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        installmentsButton.setForeground(new java.awt.Color(255, 255, 255));
        installmentsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-pay-date-30.png"))); // NOI18N
        installmentsButton.setText("     Installments");
        installmentsButton.setContentAreaFilled(false);
        installmentsButton.setFocusPainted(false);
        installmentsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        installmentsButton.setOpaque(true);
        installmentsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                installmentsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                installmentsButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                installmentsButtonMousePressed(evt);
            }
        });
        installmentsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installmentsButtonActionPerformed(evt);
            }
        });
        jPanel6.add(installmentsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 250, -1));

        salesReportButton.setBackground(new java.awt.Color(0, 137, 123));
        salesReportButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        salesReportButton.setForeground(new java.awt.Color(255, 255, 255));
        salesReportButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-payment-history-30.png"))); // NOI18N
        salesReportButton.setText("     Sales Report");
        salesReportButton.setContentAreaFilled(false);
        salesReportButton.setFocusPainted(false);
        salesReportButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        salesReportButton.setOpaque(true);
        salesReportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                salesReportButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                salesReportButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                salesReportButtonMousePressed(evt);
            }
        });
        salesReportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesReportButtonActionPerformed(evt);
            }
        });
        jPanel6.add(salesReportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 250, -1));

        settingsButton.setBackground(new java.awt.Color(0, 137, 123));
        settingsButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        settingsButton.setForeground(new java.awt.Color(255, 255, 255));
        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-settings-30.png"))); // NOI18N
        settingsButton.setText("     Settings");
        settingsButton.setContentAreaFilled(false);
        settingsButton.setFocusPainted(false);
        settingsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        settingsButton.setOpaque(true);
        settingsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                settingsButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                settingsButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                settingsButtonMousePressed(evt);
            }
        });
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        jPanel6.add(settingsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 250, -1));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(logoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(logoutButton)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(178, 223, 219));

        jPanel4.setBackground(new java.awt.Color(178, 223, 219));

        dateTimeLabel.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        dateTimeLabel.setText("Clock");

        userLabel.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        userLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-test-account-30.png"))); // NOI18N
        userLabel.setText(" User");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateTimeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userLabel)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(userLabel)))
        );

        switchPanel.setLayout(new java.awt.CardLayout());

        homePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("HOME");
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
                .addContainerGap())
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(790, Short.MAX_VALUE))
        );

        homeScrollPane.setViewportView(homePanel);

        switchPanel.add(homeScrollPane, "card2");

        salesPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("SALES");
        jLabel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        try {
            customerIDField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        customerIDField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel35.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel35.setText("Customer ID");

        payingInComboBox.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        payingInComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "Full", "Installment" }));
        payingInComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payingInComboBoxActionPerformed(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel36.setText("Paying in");

        jLabel37.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel37.setText("Paid Amount");

        paidAmountField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        discountSpinner.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        discountSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 100, 1));

        jLabel38.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel38.setText("Discount %");

        monthsSpinner.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        monthsSpinner.setModel(new javax.swing.SpinnerNumberModel(6, 6, 24, 1));

        monthsLabel.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        monthsLabel.setText("Months");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        sellButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        sellButton.setText("Sell");
        sellButton.setPreferredSize(new java.awt.Dimension(150, 39));
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });
        jPanel8.add(sellButton);

        clearSalesPanelButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clearSalesPanelButton.setText("Clear");
        clearSalesPanelButton.setPreferredSize(new java.awt.Dimension(150, 39));
        clearSalesPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSalesPanelButtonActionPerformed(evt);
            }
        });
        jPanel8.add(clearSalesPanelButton);

        salesTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        salesTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                salesTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel40.setText("Search");

        salesTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        salesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM CODE", "TYPE", "BRAND", "MODEL NO.", "MODEL NAME", "CHASSIS NO.", "ENGINE NO.", "ENGINE CAPACITY", "COLOUR", "PRICE", "MANU. YEAR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        salesTable.setRowHeight(25);
        jScrollPane6.setViewportView(salesTable);
        if (salesTable.getColumnModel().getColumnCount() > 0) {
            salesTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(5).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(8).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(9).setPreferredWidth(200);
            salesTable.getColumnModel().getColumn(10).setPreferredWidth(200);
        }

        javax.swing.GroupLayout salesPanelLayout = new javax.swing.GroupLayout(salesPanel);
        salesPanel.setLayout(salesPanelLayout);
        salesPanelLayout.setHorizontalGroup(
            salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
                    .addComponent(jSeparator7)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator8)
                    .addGroup(salesPanelLayout.createSequentialGroup()
                        .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(salesPanelLayout.createSequentialGroup()
                                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(monthsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(salesPanelLayout.createSequentialGroup()
                                        .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(customerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(payingInComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(138, 138, 138)
                                        .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(paidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(discountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(monthsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(salesPanelLayout.createSequentialGroup()
                                .addComponent(jLabel40)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(salesTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );
        salesPanelLayout.setVerticalGroup(
            salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jLabel37)
                    .addComponent(paidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payingInComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(discountSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38))
                .addGap(18, 18, 18)
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(monthsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthsLabel))
                .addGap(18, 18, 18)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(salesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salesTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addContainerGap())
        );

        salesScrollPane.setViewportView(salesPanel);

        switchPanel.add(salesScrollPane, "card2");

        inventoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("INVENTORY");
        jLabel3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        inventoryTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        inventoryTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inventoryTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel16.setText("Search");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        addMotorcyclesButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        addMotorcyclesButton.setText("Add");
        addMotorcyclesButton.setPreferredSize(new java.awt.Dimension(150, 39));
        addMotorcyclesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMotorcyclesButtonActionPerformed(evt);
            }
        });
        jPanel7.add(addMotorcyclesButton);

        updateMotorcyclesButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        updateMotorcyclesButton.setText("Update");
        updateMotorcyclesButton.setPreferredSize(new java.awt.Dimension(150, 39));
        updateMotorcyclesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMotorcyclesButtonActionPerformed(evt);
            }
        });
        jPanel7.add(updateMotorcyclesButton);

        deleteMotorcyclesButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        deleteMotorcyclesButton.setText("Delete");
        deleteMotorcyclesButton.setPreferredSize(new java.awt.Dimension(150, 39));
        deleteMotorcyclesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMotorcyclesButtonActionPerformed(evt);
            }
        });
        jPanel7.add(deleteMotorcyclesButton);

        clearInventoryPanelButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clearInventoryPanelButton.setText("Clear");
        clearInventoryPanelButton.setPreferredSize(new java.awt.Dimension(150, 39));
        clearInventoryPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInventoryPanelButtonActionPerformed(evt);
            }
        });
        jPanel7.add(clearInventoryPanelButton);

        inventoryTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ITEM CODE", "TYPE", "BRAND", "MODEL NO.", "MODEL NAME", "CHASSIS NO.", "ENGINE NO.", "ENG. CAPACITY", "COLOUR", "PRICE", "MANU. YEAR", "CREATED", "LAST UPDATED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        inventoryTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        inventoryTable.setRowHeight(25);
        inventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inventoryTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(inventoryTable);
        if (inventoryTable.getColumnModel().getColumnCount() > 0) {
            inventoryTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(5).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(8).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(9).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(10).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(11).setPreferredWidth(200);
            inventoryTable.getColumnModel().getColumn(12).setPreferredWidth(200);
        }

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));

        brandField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        modelNoField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        modelNameField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        chassisNoField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        engineNoField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        engineCapacityField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        colourField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        priceField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel25.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel25.setText("Type");

        jLabel26.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel26.setText("Brand");

        jLabel27.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel27.setText("Model No.");

        jLabel28.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel28.setText("Model Name");

        jLabel29.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel29.setText("Chassis No.");

        jLabel30.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel30.setText("Engine No.");

        jLabel31.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel31.setText("Engine Capacity");

        jLabel32.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel32.setText("Colour");

        jLabel33.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel33.setText("Price");

        typeComboBox.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Type...", "Auto", "Manual", "Clutch" }));

        brandComboBox.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        brandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Brand..." }));
        brandComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandComboBoxActionPerformed(evt);
            }
        });

        try {
            manuYearField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        manuYearField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel34.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel34.setText("Manu. Year");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(brandField, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE)
                            .addComponent(modelNameField)
                            .addComponent(modelNoField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(engineNoField)
                            .addComponent(chassisNoField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(colourField)
                            .addComponent(engineCapacityField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(priceField, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(manuYearField))
                        .addGap(12, 12, 12)
                        .addComponent(brandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26)
                    .addComponent(brandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel27))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chassisNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engineNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(engineCapacityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colourField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manuYearField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addContainerGap(96, Short.MAX_VALUE))
        );

        jScrollPane8.setViewportView(jPanel10);

        javax.swing.GroupLayout inventoryPanelLayout = new javax.swing.GroupLayout(inventoryPanel);
        inventoryPanel.setLayout(inventoryPanelLayout);
        inventoryPanelLayout.setHorizontalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jSeparator4)
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inventoryTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );
        inventoryPanelLayout.setVerticalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inventoryTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        inventoryScrollPane.setViewportView(inventoryPanel);

        switchPanel.add(inventoryScrollPane, "card2");

        customersPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("CUSTOMERS");
        jLabel4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        customersTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        customersTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customersTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel17.setText("Search");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        addCustomersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        addCustomersButton.setText("Add");
        addCustomersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        addCustomersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCustomersButtonActionPerformed(evt);
            }
        });
        jPanel9.add(addCustomersButton);

        updateCustomersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        updateCustomersButton.setText("Update");
        updateCustomersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        updateCustomersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustomersButtonActionPerformed(evt);
            }
        });
        jPanel9.add(updateCustomersButton);

        deleteCustomersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        deleteCustomersButton.setText("Delete");
        deleteCustomersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        deleteCustomersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomersButtonActionPerformed(evt);
            }
        });
        jPanel9.add(deleteCustomersButton);

        clearCustomersPanelButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clearCustomersPanelButton.setText("Clear");
        clearCustomersPanelButton.setPreferredSize(new java.awt.Dimension(150, 39));
        clearCustomersPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCustomersPanelButtonActionPerformed(evt);
            }
        });
        jPanel9.add(clearCustomersPanelButton);

        customersTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ID CARD NO.", "FULL NAME", "DOB", "ADDRESS", "MOBILE NO.", "EMAIL ADDRESS", "ACCOUNT NO.", "RIDING ZONE", "CREATED", "LAST UPDATED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        customersTable.setRowHeight(25);
        customersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customersTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(customersTable);
        if (customersTable.getColumnModel().getColumnCount() > 0) {
            customersTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(5).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(8).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(9).setPreferredWidth(200);
            customersTable.getColumnModel().getColumn(10).setPreferredWidth(200);
        }

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        nidField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        customerFullNameField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        try {
            dobField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        dobField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        addressField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        phoneNoField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        emailField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        accountNoField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel18.setText("NID Card No.");

        jLabel19.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel19.setText("Full Name");

        jLabel20.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel20.setText("DOB");

        jLabel21.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel21.setText("Address");

        jLabel22.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel22.setText("Phone No.");

        jLabel23.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel23.setText("Email Address");

        jLabel24.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel24.setText("Account No.");

        ridingZoneField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel13.setText("Riding Zone");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerFullNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 1158, Short.MAX_VALUE)
                    .addComponent(nidField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addressField)
                    .addComponent(dobField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(accountNoField)
                    .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(phoneNoField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ridingZoneField))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nidField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerFullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accountNoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ridingZoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jScrollPane9.setViewportView(jPanel12);

        javax.swing.GroupLayout customersPanelLayout = new javax.swing.GroupLayout(customersPanel);
        customersPanel.setLayout(customersPanelLayout);
        customersPanelLayout.setHorizontalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator5)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5)
                    .addComponent(jSeparator6)
                    .addGroup(customersPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(customersTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );
        customersPanelLayout.setVerticalGroup(
            customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(customersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customersTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        customersScrollPane.setViewportView(customersPanel);

        switchPanel.add(customersScrollPane, "card2");

        installmentsPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("INSTALLMENTS");
        jLabel5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        installmentsPaidAmountField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel39.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel39.setText("Paid Amount");

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));

        payButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        payButton.setText("Pay");
        payButton.setPreferredSize(new java.awt.Dimension(150, 39));
        payButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payButtonActionPerformed(evt);
            }
        });
        jPanel14.add(payButton);

        clearInstallmentPanelButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clearInstallmentPanelButton.setText("Clear");
        clearInstallmentPanelButton.setPreferredSize(new java.awt.Dimension(150, 39));
        clearInstallmentPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInstallmentPanelButtonActionPerformed(evt);
            }
        });
        jPanel14.add(clearInstallmentPanelButton);

        installmentsTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        installmentsTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                installmentsTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel41.setText("Search");

        installmentsTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        installmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "INSTALLMENT ID", "CUSTOMER ID", "MODEL NAME", "CHASSIS NO.", "TOTAL PRICE", "DOWN PAYMENT", "MONTHLY PAYMENT", "PAID AMOUNT", "TOTAL MONTHS", "MONTHS PAID", "DUE DATE", "LAST PAID", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        installmentsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        installmentsTable.setRowHeight(25);
        jScrollPane7.setViewportView(installmentsTable);
        if (installmentsTable.getColumnModel().getColumnCount() > 0) {
            installmentsTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(5).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(8).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(9).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(10).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(11).setPreferredWidth(200);
            installmentsTable.getColumnModel().getColumn(12).setPreferredWidth(200);
        }

        javax.swing.GroupLayout installmentsPanelLayout = new javax.swing.GroupLayout(installmentsPanel);
        installmentsPanel.setLayout(installmentsPanelLayout);
        installmentsPanelLayout.setHorizontalGroup(
            installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(installmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
                    .addComponent(jSeparator9)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator10)
                    .addGroup(installmentsPanelLayout.createSequentialGroup()
                        .addGroup(installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(installmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(installmentsPaidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(installmentsPanelLayout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(installmentsTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane7))
                .addContainerGap())
        );
        installmentsPanelLayout.setVerticalGroup(
            installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(installmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(installmentsPaidAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(installmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(installmentsTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );

        installmentsScrollPane.setViewportView(installmentsPanel);

        switchPanel.add(installmentsScrollPane, "card2");

        salesReportPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("SALES REPORT");
        jLabel6.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        salesReportTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        salesReportTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                salesReportTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel15.setText("Search");

        salesReportTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        salesReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PAYMENT ID", "CUSTOMER ID", "MODEL NAME", "CHASSIS NO.", "PAYING IN", "ORIGINAL PRICE", "DISCOUNT AMOUNT", "GST AMOUNT", "TOTAL PRICE", "PAID AMOUNT", "BALANCE", "SALES PERSON", "CREATED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        salesReportTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        salesReportTable.setRowHeight(25);
        jScrollPane3.setViewportView(salesReportTable);
        if (salesReportTable.getColumnModel().getColumnCount() > 0) {
            salesReportTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(2).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(3).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(4).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(5).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(6).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(7).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(8).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(9).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(10).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(11).setPreferredWidth(200);
            salesReportTable.getColumnModel().getColumn(12).setPreferredWidth(200);
        }

        javax.swing.GroupLayout salesReportPanelLayout = new javax.swing.GroupLayout(salesReportPanel);
        salesReportPanel.setLayout(salesReportPanelLayout);
        salesReportPanelLayout.setHorizontalGroup(
            salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, salesReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, salesReportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(salesReportTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        salesReportPanelLayout.setVerticalGroup(
            salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(salesReportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(salesReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salesReportTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                .addContainerGap())
        );

        salesReportScrollPane.setViewportView(salesReportPanel);

        switchPanel.add(salesReportScrollPane, "card2");

        settingsPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Cambria", 0, 36)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("SETTINGS");
        jLabel7.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 1, 0, new java.awt.Color(0, 0, 0)));

        usersButton.setBackground(new java.awt.Color(38, 166, 154));
        usersButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        usersButton.setForeground(new java.awt.Color(255, 255, 255));
        usersButton.setText("Users");
        usersButton.setContentAreaFilled(false);
        usersButton.setFocusPainted(false);
        usersButton.setOpaque(true);
        usersButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                usersButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                usersButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                usersButtonMousePressed(evt);
            }
        });
        usersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usersButtonActionPerformed(evt);
            }
        });

        loginHistoryButton.setBackground(new java.awt.Color(255, 255, 255));
        loginHistoryButton.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        loginHistoryButton.setText("Login History");
        loginHistoryButton.setContentAreaFilled(false);
        loginHistoryButton.setFocusPainted(false);
        loginHistoryButton.setOpaque(true);
        loginHistoryButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loginHistoryButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loginHistoryButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                loginHistoryButtonMousePressed(evt);
            }
        });
        loginHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginHistoryButtonActionPerformed(evt);
            }
        });

        settingsSwitchPanel.setLayout(new java.awt.CardLayout());

        usersPanel.setBackground(new java.awt.Color(255, 255, 255));

        usersTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FULL NAME", "USERNAME", "PASSWORD", "ROLE", "STATUS", "CREATED", "LAST UPDATED"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        usersTable.setRowHeight(25);
        usersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usersTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(usersTable);

        userFullNameField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        usernameField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        passwordField.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel9.setText("Full Name");

        jLabel10.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel10.setText("Username");

        jLabel11.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel11.setText("Password");

        roleComboBox.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        roleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select...", "Cashier", "Administrator" }));
        roleComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleComboBoxActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        jLabel12.setText("Role");

        statusLabel.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        statusLabel.setText("Status");

        statusComboBox.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        statusComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Inactive", "Active" }));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        addUsersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        addUsersButton.setText("Add");
        addUsersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        addUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUsersButtonActionPerformed(evt);
            }
        });
        jPanel5.add(addUsersButton);

        updateUsersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        updateUsersButton.setText("Update");
        updateUsersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        updateUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateUsersButtonActionPerformed(evt);
            }
        });
        jPanel5.add(updateUsersButton);

        deleteUsersButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        deleteUsersButton.setText("Delete");
        deleteUsersButton.setPreferredSize(new java.awt.Dimension(150, 39));
        deleteUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUsersButtonActionPerformed(evt);
            }
        });
        jPanel5.add(deleteUsersButton);

        clearUsersPanelButton.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        clearUsersPanelButton.setText("Clear");
        clearUsersPanelButton.setPreferredSize(new java.awt.Dimension(150, 39));
        clearUsersPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearUsersPanelButtonActionPerformed(evt);
            }
        });
        jPanel5.add(clearUsersPanelButton);

        usersTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        usersTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usersTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel14.setText("Search");

        javax.swing.GroupLayout usersPanelLayout = new javax.swing.GroupLayout(usersPanel);
        usersPanel.setLayout(usersPanelLayout);
        usersPanelLayout.setHorizontalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
            .addComponent(jSeparator1)
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(usersPanelLayout.createSequentialGroup()
                        .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(usersPanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(103, 103, 103)
                                .addComponent(statusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(passwordField)
                            .addComponent(usernameField)
                            .addComponent(userFullNameField, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
            .addComponent(jSeparator2)
            .addGroup(usersPanelLayout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usersTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        usersPanelLayout.setVerticalGroup(
            usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersPanelLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userFullNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(statusLabel)
                    .addComponent(statusComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(usersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usersTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
        );

        settingsSwitchPanel.add(usersPanel, "card2");

        loginHistoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        loginHistoryTableSearchField.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        loginHistoryTableSearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                loginHistoryTableSearchFieldKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        jLabel8.setText("Search");

        loginHistoryTable.setFont(new java.awt.Font("Calibri Light", 0, 18)); // NOI18N
        loginHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FULL NAME", "USERNAME", "ROLE", "LOGIN", "LOGOUT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        loginHistoryTable.setRowHeight(25);
        jScrollPane1.setViewportView(loginHistoryTable);

        javax.swing.GroupLayout loginHistoryPanelLayout = new javax.swing.GroupLayout(loginHistoryPanel);
        loginHistoryPanel.setLayout(loginHistoryPanelLayout);
        loginHistoryPanelLayout.setHorizontalGroup(
            loginHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1329, Short.MAX_VALUE)
            .addGroup(loginHistoryPanelLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(loginHistoryTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        loginHistoryPanelLayout.setVerticalGroup(
            loginHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginHistoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginHistoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginHistoryTableSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))
        );

        settingsSwitchPanel.add(loginHistoryPanel, "card2");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(settingsSwitchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, settingsPanelLayout.createSequentialGroup()
                        .addComponent(usersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(loginHistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usersButton)
                    .addComponent(loginHistoryButton))
                .addGap(18, 18, 18)
                .addComponent(settingsSwitchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        settingsScrollPane.setViewportView(settingsPanel);

        switchPanel.add(settingsScrollPane, "card2");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(switchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(switchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Close button
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // If the user confirms program exit
        if (JOptionPane.showConfirmDialog(this, "Please confirm program exit", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            // Updates logout time in the login history table
            LoginHistoryTable.updateUserInformation(currentUserRow);
            // Close the program
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    // Method to switch to different card panels
    private void switchToPanel(int panel) {
        // Remove all panels
        switchPanel.removeAll();
        switchPanel.repaint();
        switchPanel.revalidate();

        /// Add panels
        switch (panel) {
            case 1:
                switchPanel.add(homeScrollPane);
                break;
            case 2:
                switchPanel.add(salesScrollPane);
                break;
            case 3:
                switchPanel.add(inventoryScrollPane);
                break;
            case 4:
                switchPanel.add(customersScrollPane);
                break;
            case 5:
                switchPanel.add(installmentsScrollPane);
                break;
            case 6:
                switchPanel.add(salesReportScrollPane);
                break;
            case 7:
                switchPanel.add(settingsScrollPane);
                break;
        }
        switchPanel.repaint();
        switchPanel.revalidate();
    }

    // Method to reset the colour of all the buttons and change a button's colour based on click
    private void changeColourOfClickedButton(int button) {
        // Reset the colour of all the buttons
        homeButton.setBackground(new java.awt.Color(0, 137, 123));
        salesButton.setBackground(new java.awt.Color(0, 137, 123));
        inventoryButton.setBackground(new java.awt.Color(0, 137, 123));
        installmentsButton.setBackground(new java.awt.Color(0, 137, 123));
        customersButton.setBackground(new java.awt.Color(0, 137, 123));
        salesReportButton.setBackground(new java.awt.Color(0, 137, 123));
        settingsButton.setBackground(new java.awt.Color(0, 137, 123));

        // Changes the colour of the clicked button
        switch (button) {
            case 1:
                homeButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 2:
                salesButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 3:
                inventoryButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 4:
                customersButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 5:
                installmentsButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 6:
                salesReportButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
            case 7:
                settingsButton.setBackground(new java.awt.Color(38, 166, 154));
                break;
        }
    }

    // Home
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        changeColourOfClickedButton(1);
        switchToPanel(1);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void homeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseEntered
        if (homePanel.isShowing()) {
            homeButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            homeButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_homeButtonMouseEntered

    private void homeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMouseExited
        if (homePanel.isShowing()) {
            homeButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            homeButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_homeButtonMouseExited

    private void homeButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeButtonMousePressed
        homeButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_homeButtonMousePressed

    // Sales
    private void salesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesButtonActionPerformed
        changeColourOfClickedButton(2);
        switchToPanel(2);
    }//GEN-LAST:event_salesButtonActionPerformed

    private void salesButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesButtonMouseEntered
        if (salesPanel.isShowing()) {
            salesButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            salesButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_salesButtonMouseEntered

    private void salesButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesButtonMouseExited
        if (salesPanel.isShowing()) {
            salesButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            salesButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_salesButtonMouseExited

    private void salesButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesButtonMousePressed
        salesButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_salesButtonMousePressed

    // Inventory
    private void inventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inventoryButtonActionPerformed
        changeColourOfClickedButton(3);
        switchToPanel(3);
    }//GEN-LAST:event_inventoryButtonActionPerformed

    private void inventoryButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryButtonMouseEntered
        if (inventoryPanel.isShowing()) {
            inventoryButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            inventoryButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_inventoryButtonMouseEntered

    private void inventoryButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryButtonMouseExited
        if (inventoryPanel.isShowing()) {
            inventoryButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            inventoryButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_inventoryButtonMouseExited

    private void inventoryButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryButtonMousePressed
        inventoryButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_inventoryButtonMousePressed

    // Customers
    private void customersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customersButtonActionPerformed
        changeColourOfClickedButton(4);
        switchToPanel(4);
    }//GEN-LAST:event_customersButtonActionPerformed

    private void customersButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersButtonMouseEntered
        if (customersPanel.isShowing()) {
            customersButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            customersButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_customersButtonMouseEntered

    private void customersButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersButtonMouseExited
        if (customersPanel.isShowing()) {
            customersButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            customersButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_customersButtonMouseExited

    private void customersButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersButtonMousePressed
        customersButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_customersButtonMousePressed

    // Installments
    private void installmentsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installmentsButtonActionPerformed
        changeColourOfClickedButton(5);
        switchToPanel(5);
    }//GEN-LAST:event_installmentsButtonActionPerformed

    private void installmentsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_installmentsButtonMouseEntered
        if (installmentsPanel.isShowing()) {
            installmentsButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            installmentsButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_installmentsButtonMouseEntered

    private void installmentsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_installmentsButtonMouseExited
        if (installmentsPanel.isShowing()) {
            installmentsButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            installmentsButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_installmentsButtonMouseExited

    private void installmentsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_installmentsButtonMousePressed
        installmentsButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_installmentsButtonMousePressed

    // Sales Report
    private void salesReportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesReportButtonActionPerformed
        changeColourOfClickedButton(6);
        switchToPanel(6);
    }//GEN-LAST:event_salesReportButtonActionPerformed

    private void salesReportButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesReportButtonMouseEntered
        if (salesReportPanel.isShowing()) {
            salesReportButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            salesReportButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_salesReportButtonMouseEntered

    private void salesReportButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesReportButtonMouseExited
        if (salesReportPanel.isShowing()) {
            salesReportButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            salesReportButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_salesReportButtonMouseExited

    private void salesReportButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salesReportButtonMousePressed
        salesReportButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_salesReportButtonMousePressed

    // Settings
    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        changeColourOfClickedButton(7);
        switchToPanel(7);
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void settingsButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMouseEntered
        if (settingsPanel.isShowing()) {
            settingsButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            settingsButton.setBackground(new java.awt.Color(0, 150, 136));
        }
    }//GEN-LAST:event_settingsButtonMouseEntered

    private void settingsButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMouseExited
        if (settingsPanel.isShowing()) {
            settingsButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            settingsButton.setBackground(new java.awt.Color(0, 137, 123));
        }
    }//GEN-LAST:event_settingsButtonMouseExited

    private void settingsButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_settingsButtonMousePressed
        settingsButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_settingsButtonMousePressed

    // Logout
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // If the user confirms program logout
        if (JOptionPane.showConfirmDialog(this, "Please confirm user logout", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
            // Updates logout time in the login history table
            LoginHistoryTable.updateUserInformation(currentUserRow);
            // LoginUI is set to visible after the disposal of the current frame
            new LoginUI().setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void logoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseEntered
        logoutButton.setBackground(new java.awt.Color(0, 150, 136));
    }//GEN-LAST:event_logoutButtonMouseEntered

    private void logoutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseExited
        logoutButton.setBackground(new java.awt.Color(0, 137, 123));
    }//GEN-LAST:event_logoutButtonMouseExited

    private void logoutButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMousePressed
        logoutButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_logoutButtonMousePressed

    // Method to switch to different card panels in the settings panel
    private void switchToSettingsSubPanel(int panel) {
        // Remove all panels
        settingsSwitchPanel.removeAll();
        settingsSwitchPanel.repaint();
        settingsSwitchPanel.revalidate();

        // Add panels
        switch (panel) {
            case 1:
                settingsSwitchPanel.add(usersPanel);
                break;
            case 2:
                settingsSwitchPanel.add(loginHistoryPanel);
                break;
        }
        settingsSwitchPanel.repaint();
        settingsSwitchPanel.revalidate();
    }

    // Method to reset the colour of all the buttons and change a button's colour based on click
    private void changeColourOfSettingsButton(int button) {
        // Reset the colour of all the buttons
        usersButton.setBackground(Color.white);
        usersButton.setForeground(Color.black);

        loginHistoryButton.setBackground(Color.white);
        loginHistoryButton.setForeground(Color.black);

        // Changes the colour of the clicked button
        switch (button) {
            case 1:
                usersButton.setBackground(new java.awt.Color(38, 166, 154));
                usersButton.setForeground(Color.white);
                break;
            case 2:
                loginHistoryButton.setBackground(new java.awt.Color(38, 166, 154));
                loginHistoryButton.setForeground(Color.white);
                break;
        }
    }

    // Add User
    private void usersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usersButtonActionPerformed
        switchToSettingsSubPanel(1);
        changeColourOfSettingsButton(1);
    }//GEN-LAST:event_usersButtonActionPerformed

    private void usersButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersButtonMouseEntered
        if (usersPanel.isShowing()) {
            usersButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            usersButton.setBackground(new java.awt.Color(128, 203, 196));
            usersButton.setForeground(Color.white);
        }
    }//GEN-LAST:event_usersButtonMouseEntered

    private void usersButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersButtonMouseExited
        if (usersPanel.isShowing()) {
            usersButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            usersButton.setBackground(Color.white);
            usersButton.setForeground(Color.black);
        }
    }//GEN-LAST:event_usersButtonMouseExited

    private void usersButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersButtonMousePressed
        usersButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_usersButtonMousePressed

    // Login History
    private void loginHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginHistoryButtonActionPerformed
        switchToSettingsSubPanel(2);
        changeColourOfSettingsButton(2);
    }//GEN-LAST:event_loginHistoryButtonActionPerformed

    private void loginHistoryButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginHistoryButtonMouseEntered
        if (loginHistoryPanel.isShowing()) {
            loginHistoryButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            loginHistoryButton.setBackground(new java.awt.Color(128, 203, 196));
            loginHistoryButton.setForeground(Color.white);
        }
    }//GEN-LAST:event_loginHistoryButtonMouseEntered

    private void loginHistoryButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginHistoryButtonMouseExited
        if (loginHistoryPanel.isShowing()) {
            loginHistoryButton.setBackground(new java.awt.Color(38, 166, 154));
        } else {
            loginHistoryButton.setBackground(Color.white);
            loginHistoryButton.setForeground(Color.black);
        }
    }//GEN-LAST:event_loginHistoryButtonMouseExited

    private void loginHistoryButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginHistoryButtonMousePressed
        loginHistoryButton.setBackground(new java.awt.Color(38, 166, 154));
    }//GEN-LAST:event_loginHistoryButtonMousePressed

    private void roleComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleComboBoxActionPerformed
        switch (roleComboBox.getSelectedIndex()) {
            case 0:  // Select...
                statusComboBox.setSelectedIndex(0);
                statusLabel.setEnabled(false);
                statusComboBox.setEnabled(false);
                break;
            case 1:  // Cashier
                statusComboBox.setSelectedIndex(0);
                statusLabel.setEnabled(true);
                statusComboBox.setEnabled(true);
                break;
            case 2:  // Administrator
                statusComboBox.setSelectedIndex(1);
                statusLabel.setEnabled(false);
                statusComboBox.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_roleComboBoxActionPerformed

    // Add users button clicked
    private void addUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUsersButtonActionPerformed
        // Gets the relevant data from users panel
        String fullName = userFullNameField.getText().trim();
        String username = usernameField.getText().trim();
        String password = passwordField.getText();

        // If fields are not empty and an option from the combo box is selected
        if (!"".equals(fullName) && !"".equals(username) && !"".equals(password) && roleComboBox.getSelectedIndex() != 0) {
            // Gets the remaining data and assign it to the variables
            int id = UniqueIDGenerator.generateUserID();
            String role = roleComboBox.getSelectedItem().toString();
            String status = statusComboBox.getSelectedItem().toString();

            // Check if username is unique and role is selected as an administrator if there is no other user registered in the database
            boolean check = UsersTable.compareUserInformation(username, role);

            if (check == true) {
                // Insert data into the database
                UsersTable.insertUserInformation(id, fullName, username, password, role, status);
                // Refresh the users jTable
                refreshUsersTable();
                JOptionPane.showMessageDialog(null, "User registered successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "User registration failed!", "", JOptionPane.ERROR_MESSAGE);
            }
            // If fields are empty or an option from the combo box is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Empty field(s) or role not selected in combo box!");
        }
    }//GEN-LAST:event_addUsersButtonActionPerformed

    // Update users button clicked 
    private void updateUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateUsersButtonActionPerformed
        // If a row is selected in the users jTable
        if (usersTable.isRowSelected(usersTable.getSelectedRow())) {
            // Gets relevant data from users panel
            String fullName = userFullNameField.getText().trim();
            String username = usernameField.getText().trim();
            String password = passwordField.getText();

            // If fields are not empty and an option from the combo box is selected
            if (!"".equals(fullName) && !"".equals(username) && !"".equals(password) && roleComboBox.getSelectedIndex() != 0) {
                // Gets the remaining data and asign it to the variables

                // Gets the selected row
                int row = usersTable.getSelectedRow();
                // Get id from users jtable
                int id = (int) usersTable.getValueAt(row, 0);
                String role = roleComboBox.getSelectedItem().toString();

                // If the current user is selected and a new role from the combo box is not changed
                if (id != currentUserID && !role.equals(currentUserRole)) {
                    String previousUsername = usersTable.getValueAt(row, 2).toString();  // Get the username from usersTable
                    String status = statusComboBox.getSelectedItem().toString();

                    // Checks for uniqueness of data
                    // and if the given data is not the same as the data in the table
                    boolean check = UsersTable.compareUserInformation(fullName, username, previousUsername, password, role, status);

                    if (check == true) {
                        // Updates user information in both the tables in the database(users and login history)
                        UsersTable.updateUserInformation(id, fullName, username, password, role, status);
                        LoginHistoryTable.updateUserInformation(id, fullName, username);

                        // Refresh the jTables
                        refreshUsersTable();
                        refreshLoginHistoryTable();

                        // Re selects the updated row
                        usersTable.setRowSelectionInterval(row, row);
                        JOptionPane.showMessageDialog(null, "User information updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(null, "User information update failed!", "", JOptionPane.ERROR_MESSAGE);
                    }
                    // If the current user tries to change the role to a cashier
                } else {
                    JOptionPane.showMessageDialog(null, "The current user's role cannot be changed!", "", JOptionPane.ERROR_MESSAGE);
                }
                // If fields are empty or an option from the combo box is not selected
            } else {
                JOptionPane.showMessageDialog(null, "Empty field(s) or role not selected in combo box!");
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update!");
        }
    }//GEN-LAST:event_updateUsersButtonActionPerformed

    // Delete users button clicked
    private void deleteUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUsersButtonActionPerformed
        // If a row is selected in the users jTable
        if (usersTable.isRowSelected(usersTable.getSelectedRow())) {
            tableModel = (DefaultTableModel) usersTable.getModel();
            // Gets the id of the selected user
            int id = (int) usersTable.getValueAt(usersTable.getSelectedRow(), 0);

            // Check if the selected user is the current user
            boolean currentUser = LoginHistoryTable.checkLastUser(id);

            if (currentUser == false) {
                // If confirmed before deletion
                if (JOptionPane.showConfirmDialog(null, "Pease confirm!", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                    // Gets the currently selected row index
                    int row = usersTable.convertRowIndexToModel(usersTable.getSelectedRow());
                    // Remove row from the users jTable
                    tableModel.removeRow(row);
                    // Remove user information from the database
                    UsersTable.deleteUserInformation(id);
                    JOptionPane.showMessageDialog(null, "User information deleted successfully!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Current user cannot be deleted!", "", JOptionPane.ERROR_MESSAGE);
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete!");
        }
    }//GEN-LAST:event_deleteUsersButtonActionPerformed

    // Method to clear the fields and combo box in the users table
    private void clearUsersPanel() {
        userFullNameField.setText(null);
        usernameField.setText(null);
        passwordField.setText(null);
        roleComboBox.setSelectedIndex(0);
        statusComboBox.setSelectedIndex(0);
        usersTable.getSelectionModel().clearSelection();
    }

    // Clear users button clicked
    private void clearUsersPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearUsersPanelButtonActionPerformed
        clearUsersPanel();
    }//GEN-LAST:event_clearUsersPanelButtonActionPerformed

    // Charachter entered in search field (usersTable)
    private void usersTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usersTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = usersTableSearchField.getText().trim();
        // Gets the table model of the users jTable
        tableModel = (DefaultTableModel) usersTable.getModel();

        // Create and set the row sorter to the users jtable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        usersTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_usersTableSearchFieldKeyReleased

    // Users jTable row selected
    private void usersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTableMouseClicked
        // Gets the table model of the users jTable
        tableModel = (DefaultTableModel) usersTable.getModel();
        int row = usersTable.convertRowIndexToModel(usersTable.getSelectedRow());

        // Gets the data from the users jTable and displays them in the fields and combo box
        userFullNameField.setText(tableModel.getValueAt(row, 1).toString());
        usernameField.setText(tableModel.getValueAt(row, 2).toString());
        passwordField.setText(tableModel.getValueAt(row, 3).toString());
        roleComboBox.getModel().setSelectedItem(tableModel.getValueAt(row, 4));
        statusComboBox.getModel().setSelectedItem(tableModel.getValueAt(row, 5));
    }//GEN-LAST:event_usersTableMouseClicked

    // Add customers button clicked
    private void addCustomersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCustomersButtonActionPerformed
        // Gets relevant data from customers panel
        String nid = nidField.getText().trim();
        String fullName = customerFullNameField.getText().trim();
        String dob = dobField.getText().trim();
        String address = addressField.getText().trim();
        String phoneNo = phoneNoField.getText().trim();
        String ridingZone = ridingZoneField.getText().trim();

        // If fields are not empty
        if (!"".equals(nid) && !"".equals(fullName) && !"".equals(dob) && !"".equals(address) && !"".equals(phoneNo) && !"".equals(ridingZone)) {
            // Gets remaining data and assign it to the variables
            int id = UniqueIDGenerator.generateCustomerID();
            String email = emailField.getText().trim();
            String accountNo = accountNoField.getText().trim();

            // Checks for the uniqueness of the national id and that a customer is above the age of 18
            boolean check = CustomersTable.compareCustomersInformation(nid, dob);

            if (check == true) {
                // Inserts data into the database
                CustomersTable.insertCustomerInformation(id, nid, email, dob, address, phoneNo, email, accountNo, ridingZone);
                // Refresh customers jTable
                refreshCustomersTable();
                JOptionPane.showMessageDialog(null, "Customer registered successfully!");
            } else {
                JOptionPane.showMessageDialog(null, "Customer registration failed!", "", JOptionPane.ERROR_MESSAGE);
            }
            // If fields are not empty
        } else {
            JOptionPane.showMessageDialog(null, "Empty field(s)!");
        }
    }//GEN-LAST:event_addCustomersButtonActionPerformed

    // Update customers button clicked
    private void updateCustomersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustomersButtonActionPerformed
        // If a row is selected from the customers jTable
        if (customersTable.isRowSelected(customersTable.getSelectedRow())) {
            // Gets relevant data from customers panel
            String nid = nidField.getText().trim();
            String fullName = customerFullNameField.getText().trim();
            String dob = dobField.getText().trim();
            String address = addressField.getText().trim();
            String phoneNo = phoneNoField.getText().trim();
            String ridingZone = ridingZoneField.getText().trim();

            // If fields are not empty
            if (!"".equals(nid) && !"".equals(fullName) && !"".equals(dob) && !"".equals(address) && !"".equals(phoneNo) && !"".equals(ridingZone)) {
                // Gets the remaining data and assigns them to the variables
                int row = customersTable.getSelectedRow();

                int id = (int) customersTable.getValueAt(row, 0);
                String previousNID = customersTable.getValueAt(row, 2).toString();
                String email = emailField.getText().trim();
                String accountNo = accountNoField.getText().trim();

                // Checks for the uniqueness of the national id and that a customer is above the age of 18
                // also if the given data is not the same as the data in the table
                boolean check = CustomersTable.compareUserInformation(nid, previousNID, fullName, dob, address, phoneNo, email, accountNo, ridingZone);

                if (check == true) {
                    // Updates the data in the database
                    CustomersTable.updateCustomerInformation(id, nid, fullName, dob, address, phoneNo, email, accountNo, ridingZone);
                    // Refresh the customers jTable
                    refreshCustomersTable();

                    // Re selects the updated row
                    customersTable.setRowSelectionInterval(row, row);
                    JOptionPane.showMessageDialog(null, "Customer information updated successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Customer information update failed!", "", JOptionPane.ERROR_MESSAGE);
                }
                // If fields are empty
            } else {
                JOptionPane.showMessageDialog(null, "Empty field(s)!");
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update!");
        }
    }//GEN-LAST:event_updateCustomersButtonActionPerformed

    // Delete customers button clicked
    private void deleteCustomersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomersButtonActionPerformed
        // If a row from the customers jTable is selected
        if (customersTable.isRowSelected(customersTable.getSelectedRow())) {
            tableModel = (DefaultTableModel) customersTable.getModel();
            int id = (int) customersTable.getValueAt(customersTable.getSelectedRow(), 0);

            // If confirmed before deletion
            if (JOptionPane.showConfirmDialog(null, "Pease confirm!", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                // Gets the currently selected row index
                int row = customersTable.convertRowIndexToModel(customersTable.getSelectedRow());
                // Removes the row from the customers jTable
                tableModel.removeRow(row);
                // Deletes customer information from the database
                CustomersTable.deleteCustomerInformation(id);
                JOptionPane.showMessageDialog(null, "User information deleted successfully!");
            }
            // If a row is not slected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete!");
        }
    }//GEN-LAST:event_deleteCustomersButtonActionPerformed

    // Method to clear fields in the customers panel
    private void clearCustomersPanel() {
        // Clear all the fields(set field text to null)
        nidField.setText(null);
        customerFullNameField.setText(null);
        dobField.setText(null);
        addressField.setText(null);
        phoneNoField.setText(null);
        emailField.setText(null);
        accountNoField.setText(null);
        ridingZoneField.setText(null);
        customersTable.getSelectionModel().clearSelection();
    }

    // Clear customers button clicked
    private void clearCustomersPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCustomersPanelButtonActionPerformed
        clearCustomersPanel();
    }//GEN-LAST:event_clearCustomersPanelButtonActionPerformed

    // Charachter entered in search field (customersTable)
    private void customersTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customersTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = customersTableSearchField.getText().trim();
        // Gets the table model of the customers jTable
        tableModel = (DefaultTableModel) customersTable.getModel();

        // Create and set the row sorter to the customers jtable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        customersTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_customersTableSearchFieldKeyReleased

    // Customers table row selected
    private void customersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customersTableMouseClicked
        // Gets the table model of the customers jTable
        tableModel = (DefaultTableModel) customersTable.getModel();
        int row = customersTable.convertRowIndexToModel(customersTable.getSelectedRow());

        // Gets the data from the customers jTable and displays them in the fields
        nidField.setText(tableModel.getValueAt(row, 1).toString());
        customerFullNameField.setText(tableModel.getValueAt(row, 2).toString());
        dobField.setText(tableModel.getValueAt(row, 3).toString());
        addressField.setText(tableModel.getValueAt(row, 4).toString());
        phoneNoField.setText(tableModel.getValueAt(row, 5).toString());
        emailField.setText(tableModel.getValueAt(row, 6).toString());
        accountNoField.setText(tableModel.getValueAt(row, 7).toString());
        ridingZoneField.setText(tableModel.getValueAt(row, 8).toString());
    }//GEN-LAST:event_customersTableMouseClicked

    // Brand combo box selected
    private void brandComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandComboBoxActionPerformed
        // If selected index is 0
        if (brandComboBox.getSelectedIndex() == 0) {
            // Sets brandField as empty
            brandField.setText(null);
        } else {
            // Gets selected item from the combo box as a string
            // and sets it to the brandField
            brandField.setText(brandComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_brandComboBoxActionPerformed

    // Add motorcycle button clicked
    private void addMotorcyclesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMotorcyclesButtonActionPerformed
        // Gets relevant data from inventory panel
        String type = typeComboBox.getSelectedItem().toString();
        String brand = brandField.getText().trim();
        String modelNo = modelNoField.getText().trim();
        String modelName = modelNameField.getText().trim();
        String chassisNo = chassisNoField.getText().trim();
        String engineNo = engineNoField.getText().trim();
        String engineCapacity = engineCapacityField.getText().trim();
        String colour = colourField.getText().trim();
        String manuYear = manuYearField.getText().trim();

        // If fields are not empty and combox is selected
        if (typeComboBox.getSelectedIndex() != 0 && !"".equals(brand) && !"".equals(modelNo) && !"".equals(modelName) && !"".equals(chassisNo) && !"".equals(engineNo) && !"".equals(engineCapacity) && !"".equals(priceField.getText().trim()) && !"".equals(colour) && !"".equals(manuYear)) {
            try {
                // Gets the remaining data and assign them to the variables
                double price;
                price = Double.parseDouble(priceField.getText().trim());

                // Checks for the uniqueness of the chassis No. and engine No.
                boolean check = InventoryTable.compareMotorcycleInformation(chassisNo, engineNo);

                if (check == true) {
                    // Inserts the data into the database
                    InventoryTable.insertMotorcycleInformation(type, brand, modelNo, modelName, chassisNo, engineNo, engineCapacity, colour, price, manuYear);
                    // Refresh both the jTables(inventory and sales)
                    refreshInventoryTable();
                    refreshSalesTable();
                    // Re populate the brand combo box
                    populateBrandComboBox();
                    JOptionPane.showMessageDialog(null, "Motorcycle information entered successfully!");
                } else {
                    JOptionPane.showMessageDialog(null, "Motorcycle entry failed!", "", JOptionPane.ERROR_MESSAGE);
                }
                // If a data type other than a number is entered in the price field
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Only numbers allowed as price!");
            }
            // If fields are empty and an option from the combo box is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Empty field(s) or type not selected in combo box!");
        }
    }//GEN-LAST:event_addMotorcyclesButtonActionPerformed

    // Update motorcycle button clicked
    private void updateMotorcyclesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMotorcyclesButtonActionPerformed
        // If row from inventory jTable is selected
        if (inventoryTable.isRowSelected(inventoryTable.getSelectedRow())) {
            // Gets relevant data from inventory panel
            String type = typeComboBox.getSelectedItem().toString();
            String brand = brandField.getText().trim();
            String modelNo = modelNoField.getText().trim();
            String modelName = modelNameField.getText().trim();
            String chassisNo = chassisNoField.getText().trim();
            String engineNo = engineNoField.getText().trim();
            String engineCapacity = engineCapacityField.getText().trim();
            String colour = colourField.getText().trim();
            String manuYear = manuYearField.getText().trim();

            // If fields are not empty and an option from the combo box is selected
            if (typeComboBox.getSelectedIndex() != 0 && !"".equals(brand) && !"".equals(modelNo) && !"".equals(modelName) && !"".equals(chassisNo) && !"".equals(engineNo) && !"".equals(engineCapacity) && !"".equals(priceField.getText().trim()) && !"".equals(colour) && !"".equals(manuYear)) {
                try {
                    // Gets the remaining data and assigns them to the variables
                    int row = inventoryTable.getSelectedRow();

                    int itemCode = (int) inventoryTable.getValueAt(row, 0);
                    String previousChassisNo = inventoryTable.getValueAt(row, 5).toString();
                    String previousEngineNo = inventoryTable.getValueAt(row, 6).toString();
                    double price;

                    price = Double.parseDouble(priceField.getText().trim());

                    // Checks for the uniqueness of the chassis No. and engine No.
                    boolean check = InventoryTable.compareMotorcycleInformation(itemCode, type, brand, modelNo, modelName, chassisNo, previousChassisNo, engineNo, previousEngineNo, engineCapacity, colour, price, manuYear);

                    if (check == true) {
                        // Inserts the data into the database
                        InventoryTable.updateMotorcycleInformation(itemCode, type, brand, modelNo, modelName, chassisNo, engineNo, engineCapacity, colour, price, manuYear);
                        // Refresh both the jTables(inventory and sales)
                        refreshInventoryTable();
                        refreshSalesTable();
                        // Re populate the brand combo box
                        populateBrandComboBox();
                        // Re select the updated row
                        inventoryTable.setRowSelectionInterval(row, row);
                        JOptionPane.showMessageDialog(null, "Motorcycle information updated successfully!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Motorcycle information update failed!", "", JOptionPane.ERROR_MESSAGE);
                    }
                    // If a data type other than a number is entered in the price field
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Only numbers allowed as price!");
                }
                // If fields are empty and an option from the combo box is not selected
            } else {
                JOptionPane.showMessageDialog(null, "Empty field(s) or type not selected in combo box!");
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update!");
        }
    }//GEN-LAST:event_updateMotorcyclesButtonActionPerformed

    // Delete motorcycle button clicked
    private void deleteMotorcyclesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMotorcyclesButtonActionPerformed
        // If row from inventory jTable is selected
        if (inventoryTable.isRowSelected(inventoryTable.getSelectedRow())) {
            tableModel = (DefaultTableModel) inventoryTable.getModel();
            int itemCode = (int) inventoryTable.getValueAt(inventoryTable.getSelectedRow(), 0);

            // If confirmed before deletion
            if (JOptionPane.showConfirmDialog(null, "Pease confirm!", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                // Gets the currently selected row index
                int row = inventoryTable.convertRowIndexToModel(inventoryTable.getSelectedRow());
                // Removes row from the jTable
                tableModel.removeRow(row);
                // Delete motorcycle information from the database
                InventoryTable.deleteMotorcycleInformation(itemCode);

                // Refresh sales table and populates the brand combo box
                refreshSalesTable();
                populateBrandComboBox();
                JOptionPane.showMessageDialog(null, "Motorcycle information deleted successfully!");
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete!");
        }
    }//GEN-LAST:event_deleteMotorcyclesButtonActionPerformed

    // Method to clear inventory panel
    private void clearInventoryPanel() {
        // Clear all the fields(set field text to null)
        typeComboBox.setSelectedIndex(0);
        brandComboBox.setSelectedIndex(0);
        modelNoField.setText(null);
        modelNameField.setText(null);
        chassisNoField.setText(null);
        engineNoField.setText(null);
        engineCapacityField.setText(null);
        colourField.setText(null);
        priceField.setText(null);
        manuYearField.setText(null);
        inventoryTable.getSelectionModel().clearSelection();
    }

    // Clear inventory button clicked
    private void clearInventoryPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInventoryPanelButtonActionPerformed
        clearInventoryPanel();
    }//GEN-LAST:event_clearInventoryPanelButtonActionPerformed

    // Charachter entered in search field (inventoryTable)
    private void inventoryTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inventoryTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = inventoryTableSearchField.getText().trim();
        // Gets the table model of the inventory jTable
        tableModel = (DefaultTableModel) inventoryTable.getModel();

        // Create and set the row sorter to the inventory jtable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        inventoryTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_inventoryTableSearchFieldKeyReleased

    private void inventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inventoryTableMouseClicked
        // Gets the table model of the inventory jTable
        tableModel = (DefaultTableModel) inventoryTable.getModel();
        int row = inventoryTable.convertRowIndexToModel(inventoryTable.getSelectedRow());

        // Gets the data from the inventory jTable and displays them in the fields
        typeComboBox.getModel().setSelectedItem(tableModel.getValueAt(row, 1));
        brandField.setText(tableModel.getValueAt(row, 2).toString());
        modelNoField.setText(tableModel.getValueAt(row, 3).toString());
        modelNameField.setText(tableModel.getValueAt(row, 4).toString());
        chassisNoField.setText(tableModel.getValueAt(row, 5).toString());
        engineNoField.setText(tableModel.getValueAt(row, 6).toString());
        engineCapacityField.setText(tableModel.getValueAt(row, 7).toString());
        colourField.setText(tableModel.getValueAt(row, 8).toString());
        priceField.setText(tableModel.getValueAt(row, 9).toString());
        manuYearField.setText(tableModel.getValueAt(row, 10).toString());
    }//GEN-LAST:event_inventoryTableMouseClicked

    private void payingInComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payingInComboBoxActionPerformed
        // Installment
        if (payingInComboBox.getSelectedIndex() == 2) {
            // Show months label and spinner
            monthsLabel.setEnabled(true);
            monthsSpinner.setEnabled(true);
            // Full
        } else {
            // Hide months label and spinner
            monthsSpinner.setValue(6);
            monthsLabel.setEnabled(false);
            monthsSpinner.setEnabled(false);
        }
    }//GEN-LAST:event_payingInComboBoxActionPerformed

    // Sell motorcycle button clicked
    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        // If row from sales jTable is selected
        if (salesTable.isRowSelected(salesTable.getSelectedRow())) {
            // If fields are not empty and an option from the combo box is selected
            if (!"".equals(customerIDField.getText()) && !"".equals(paidAmountField.getText().trim()) && payingInComboBox.getSelectedIndex() != 0) {
                try {
                    tableModel = (DefaultTableModel) salesTable.getModel();
                    int row = salesTable.convertRowIndexToModel(salesTable.getSelectedRow());

                    // Gets data from the selected row in the salesTable
                    int itemCode = (int) tableModel.getValueAt(row, 0);
                    String modelName = tableModel.getValueAt(row, 4).toString();
                    String chassisNo = tableModel.getValueAt(row, 5).toString();
                    double originalPrice = (double) tableModel.getValueAt(row, 9);

                    int customerID = Integer.parseInt(customerIDField.getText());
                    String payingIn = payingInComboBox.getSelectedItem().toString();
                    double paidAmount = Double.parseDouble(paidAmountField.getText());

                    int discountPercentage = (int) discountSpinner.getValue();

                    // Checks if the database contains an id that matches with the entered customer
                    boolean customerFound = CustomersTable.searchForCustomer(customerID);

                    // If confirmed before selling 
                    if (JOptionPane.showConfirmDialog(null, "Pease confirm!", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                        if (customerFound == true) {   // If the database contains an id that matches with the entered customer
                            int paymentID = UniqueIDGenerator.generatePaymentID();   // Generate a unique payment id
                            double discountAmount = (discountPercentage * originalPrice) / 100;   // Calculate discount amount
                            double gstAmount = 0.06 * originalPrice;   // Calculate gst amount
                            double totalPrice = (originalPrice - discountAmount) + gstAmount;   // Calculate the total price by subtracting discount amount and adding gst amount
                            double balance = paidAmount - totalPrice;   // Calculate balance amount by subtracting total price from paid amount

                            // If Full is selected in Paying in combo box
                            if (payingIn.equals("Full")) {

                                // Paid amount should be greater than or equal to total price of the motorcycle
                                if (paidAmount >= originalPrice) {
                                    // Insert data into the sales report table in the database
                                    SalesReportTable.insertSalesReport(paymentID, customerID, modelName, chassisNo, payingIn, originalPrice, discountAmount, gstAmount, totalPrice, paidAmount, balance, currentUserFullName);
                                    // Delete motorcycle information from inventory table in the database
                                    InventoryTable.deleteMotorcycleInformation(itemCode);

                                    // Refresh jTables
                                    refreshSalesReportTable();
                                    refreshSalesTable();
                                    refreshInventoryTable();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Paid amount is too less!", "", JOptionPane.ERROR_MESSAGE);
                                }

                                // If Full is selected in Paying in combo box
                            } else if (payingIn.equals("Installment")) {

                                // Paid amount should be less than half the total price of the motorcycle
                                if (paidAmount < (originalPrice / 2)) {
                                    int installmentID = UniqueIDGenerator.generateInstallmentID();   // Generate a unique installment id
                                    int months = (int) monthsSpinner.getValue();
                                    LocalDate installmentDueDate = LocalDate.now().plusMonths(months);   // Calculate the due date by adding the months to the current date
                                    Date dueDate = Date.valueOf(installmentDueDate);   // Parse java.time.LocalDate into java.sql.Date 
                                    double monthlyPayment = (totalPrice - paidAmount) / months;

                                    // Add to installments table
                                    InstallmentsTable.insertInstallments(installmentID, customerID, modelName, chassisNo, totalPrice, paidAmount, monthlyPayment, paidAmount, months, 0, dueDate, "Not paid");
                                    // Add to sales report table
                                    SalesReportTable.insertSalesReport(paymentID, customerID, modelName, chassisNo, payingIn, originalPrice, discountAmount, gstAmount, totalPrice, paidAmount, balance, currentUserFullName);
                                    // delete from inventory table
                                    InventoryTable.deleteMotorcycleInformation(itemCode);

                                    // Refresh jTables
                                    refreshInstallmentsTable();
                                    refreshSalesReportTable();
                                    refreshSalesTable();
                                    refreshInventoryTable();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Paid amount is too much for installment!", "", JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        } else {   // If the database does not contain an id that matches with the entered customer
                            JOptionPane.showMessageDialog(null, "Invalid customer ID!", "", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Only numbers allowed as paid amount!");
                }
                // If fields are empty and an option from the combo box is not selected
            } else {
                JOptionPane.showMessageDialog(null, "Empty field(s) or paying in method not selected in combo box!");
            }
            // If row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select a motorcycle!");
        }
    }//GEN-LAST:event_sellButtonActionPerformed

    // Clear sales button clicked
    private void clearSalesPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSalesPanelButtonActionPerformed
        customerIDField.setText(null);
        payingInComboBox.setSelectedIndex(0);
        monthsSpinner.setValue(6);
        paidAmountField.setText(null);
        discountSpinner.setValue(0);
        salesTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_clearSalesPanelButtonActionPerformed

    // Character entered in search field (salesTable)
    private void salesTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salesTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = salesTableSearchField.getText().trim();
        // Gets the table model of the sales jTable
        tableModel = (DefaultTableModel) salesTable.getModel();

        // Create and set the row sorter to the sales jTable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        salesTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_salesTableSearchFieldKeyReleased

    // Character entered in search field (salesReport)
    private void salesReportTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_salesReportTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = salesReportTableSearchField.getText().trim();
        // Gets the table model of the sales report jTable
        tableModel = (DefaultTableModel) salesReportTable.getModel();

        // Create and set the row sorter to the sales report jtable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        salesReportTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_salesReportTableSearchFieldKeyReleased

    private void payButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payButtonActionPerformed
        // If a row from installments jTable is selected
        if (installmentsTable.isRowSelected(installmentsTable.getSelectedRow())) {
            // If paid amount field is not empty
            if (!"".equals(installmentsPaidAmountField.getText().trim())) {
                try {
                    // Gets the table model and selected row index
                    tableModel = (DefaultTableModel) installmentsTable.getModel();
                    int row = installmentsTable.getSelectedRow();

                    int totalMonths = (int) tableModel.getValueAt(row, 8);
                    int monthsPaid = (int) tableModel.getValueAt(row, 9);

                    // Gets input from user
                    double paidAmount = Double.parseDouble(installmentsPaidAmountField.getText());

                    // If No. of months paid is not equal to the No. of months selected in the sales panel
                    if (monthsPaid != totalMonths) {
                        // If confirmed before selling 
                        if (JOptionPane.showConfirmDialog(null, "Pease confirm!", "", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_NO_OPTION) {
                            // Increment no. of months paid 
                            monthsPaid++;

                            int installmentID = (int) tableModel.getValueAt(row, 0);
                            double monthlyPayment = (double) tableModel.getValueAt(row, 6);
                            double previousPaidAmount = (double) tableModel.getValueAt(row, 7);

                            // Paid amount should be greater than monthly payment amount
                            if (paidAmount >= monthlyPayment) {
                                String status;

                                // Assigns status depending on the no. of months paid
                                if (monthsPaid != totalMonths) {
                                    status = "Not Paid";
                                } else {
                                    status = "Fully Paid";
                                }

                                double newPaidAmount = previousPaidAmount + monthlyPayment;
                                // Updates installment information in the database
                                InstallmentsTable.updateInstallments(installmentID, newPaidAmount, monthsPaid, status);
                                // Refresh installments jtable
                                refreshInstallmentsTable();
                                // Re selects updated row
                                installmentsTable.setRowSelectionInterval(row, row);

                                // Generate a unique payment id
                                int paymentID = UniqueIDGenerator.generatePaymentID();

                                int customerID = (int) tableModel.getValueAt(row, 1);
                                String modelName = tableModel.getValueAt(row, 2).toString();
                                String chassisNo = tableModel.getValueAt(row, 3).toString();
                                double balance = paidAmount - monthlyPayment;

                                // Insert into sales report table in the database
                                SalesReportTable.insertSalesReport(paymentID, customerID, modelName, chassisNo, "Installment", monthlyPayment, 0, 0, monthlyPayment, paidAmount, balance, currentUserFullName);
                                // Refresh sales report jTable
                                refreshSalesReportTable();

                                JOptionPane.showMessageDialog(null, "Payment successful!");
                                // If paid amount is less than montly payment amount
                            } else {
                                JOptionPane.showMessageDialog(null, "Paid amount is too less!");
                            }
                            // If No. of months paid is equal to the No. of months selected in the sales panel
                            // implies that full amount has been paid
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "The customer has paid the full amount for the motorcycle");
                    }
                    // If another data type is entered as paid amount
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Only numbers allowed as paid amount!");
                }
                // If paid amount field is empty
            } else {
                JOptionPane.showMessageDialog(null, "Empty field");
            }
            // If a row is not selected
        } else {
            JOptionPane.showMessageDialog(null, "Please select an installment!");
        }
    }//GEN-LAST:event_payButtonActionPerformed

    // Clear installments button clicked
    private void clearInstallmentPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInstallmentPanelButtonActionPerformed
        installmentsPaidAmountField.setText(null);
        installmentsTable.getSelectionModel().clearSelection();
    }//GEN-LAST:event_clearInstallmentPanelButtonActionPerformed

    // Character entered in search field (installments)
    private void installmentsTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_installmentsTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = installmentsTableSearchField.getText().trim();
        // Gets the table model of the installments jTable
        tableModel = (DefaultTableModel) installmentsTable.getModel();

        // Create and set the row sorter to the installments jTable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        installmentsTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_installmentsTableSearchFieldKeyReleased

    // Character entered in search field (login history)
    private void loginHistoryTableSearchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_loginHistoryTableSearchFieldKeyReleased
        // Gets text from the search field
        String search = loginHistoryTableSearchField.getText().trim();
        // Gets the table model of the login history jTable
        tableModel = (DefaultTableModel) loginHistoryTable.getModel();

        // Create and set the row sorter to the login history jTable 
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(tableModel);
        loginHistoryTable.setRowSorter(trs);

        // Allow filtering
        trs.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_loginHistoryTableSearchFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuUI().setVisible(true);
            }
        });
    }

    // Method to display date and time
    private void displayDateAndTime() {
        // Initialize thread object
        Thread refeshDateTime = new Thread() {
            // Executes the thread
            @Override
            public void run() {
                // Infinite loop
                while (true) {
                    try {
                        dateTimeLabel.setText(DateAndTime.getCurrentDateAndTime());
                        // Thread sleeps for 1 second
                        sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        };
        // Starts the thread
        refeshDateTime.start();
    }

    // Method to display the current user information
    private void displayCurrentUser() {
        userLabel.setText(" Full Name: " + currentUserFullName + "   ID: " + currentUserID);
    }

    Connection con;
    PreparedStatement ps;
    ResultSet rs;
    DefaultTableModel tableModel;

    // Method to change the look of all the jTables
    private void tableDesign() {
        // Sales Table
        salesTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        salesTable.getTableHeader().setOpaque(false);
        salesTable.getTableHeader().setBackground(new Color(30, 144, 255));
        salesTable.getTableHeader().setForeground(new Color(255, 255, 255));
        salesTable.setGridColor(new Color(223, 228, 234));
        salesTable.setSelectionBackground(new Color(112, 161, 255));
        // Inventory Table
        inventoryTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        inventoryTable.getTableHeader().setOpaque(false);
        inventoryTable.getTableHeader().setBackground(new Color(30, 144, 255));
        inventoryTable.getTableHeader().setForeground(new Color(255, 255, 255));
        inventoryTable.setGridColor(new Color(223, 228, 234));
        inventoryTable.setSelectionBackground(new Color(112, 161, 255));
        // Customers Table
        customersTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        customersTable.getTableHeader().setOpaque(false);
        customersTable.getTableHeader().setBackground(new Color(30, 144, 255));
        customersTable.getTableHeader().setForeground(new Color(255, 255, 255));
        customersTable.setGridColor(new Color(223, 228, 234));
        customersTable.setSelectionBackground(new Color(112, 161, 255));
        // Installments Table
        installmentsTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        installmentsTable.getTableHeader().setOpaque(false);
        installmentsTable.getTableHeader().setBackground(new Color(30, 144, 255));
        installmentsTable.getTableHeader().setForeground(new Color(255, 255, 255));
        installmentsTable.setGridColor(new Color(223, 228, 234));
        installmentsTable.setSelectionBackground(new Color(112, 161, 255));
        // Sales Report Table
        salesReportTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        salesReportTable.getTableHeader().setOpaque(false);
        salesReportTable.getTableHeader().setBackground(new Color(30, 144, 255));
        salesReportTable.getTableHeader().setForeground(new Color(255, 255, 255));
        salesReportTable.setGridColor(new Color(223, 228, 234));
        salesReportTable.setSelectionBackground(new Color(112, 161, 255));
        // Users Table
        usersTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        usersTable.getTableHeader().setOpaque(false);
        usersTable.getTableHeader().setBackground(new Color(30, 144, 255));
        usersTable.getTableHeader().setForeground(new Color(255, 255, 255));
        usersTable.setGridColor(new Color(223, 228, 234));
        usersTable.setSelectionBackground(new Color(112, 161, 255));
        // Login History Table
        loginHistoryTable.getTableHeader().setFont(new Font("Calibri Light", Font.PLAIN, 20));
        loginHistoryTable.getTableHeader().setOpaque(false);
        loginHistoryTable.getTableHeader().setBackground(new Color(30, 144, 255));
        loginHistoryTable.getTableHeader().setForeground(new Color(255, 255, 255));
        loginHistoryTable.setGridColor(new Color(223, 228, 234));
        loginHistoryTable.setSelectionBackground(new Color(112, 161, 255));
    }

    // Method to refresh all the jTables
    private void refreshAllTables() {
        refreshUsersTable();
        refreshLoginHistoryTable();
        refreshCustomersTable();
        refreshInventoryTable();
        refreshSalesTable();
        refreshSalesReportTable();
        refreshInstallmentsTable();
    }

    // Method to refresh users jTable
    private void refreshUsersTable() {
        // Gets result set of users table
        rs = DatabaseResultSet.getUsersResultSet();
        tableModel = (DefaultTableModel) usersTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            // Add each row to its jTable using tableModel
            while (rs.next()) {
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getTimestamp(7), rs.getTimestamp(8)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh login history jTable
    private void refreshLoginHistoryTable() {
        // Gets result set of login history table
        rs = DatabaseResultSet.getLoginHistoryResultSet();
        tableModel = (DefaultTableModel) loginHistoryTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getTimestamp(6), rs.getTimestamp(7)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh customers jTable
    private void refreshCustomersTable() {
        // Gets result set of customers table
        rs = DatabaseResultSet.getCustomersResultSet();
        tableModel = (DefaultTableModel) customersTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getTimestamp(10), rs.getTimestamp(11)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh inventory jTable
    private void refreshInventoryTable() {
        // Gets result set of inventory table
        rs = DatabaseResultSet.getInventoryResultSet();
        tableModel = (DefaultTableModel) inventoryTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getDouble(10), rs.getString(11), rs.getTimestamp(12), rs.getTimestamp(13)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh sales jTable
    private void refreshSalesTable() {
        // Gets result set of sales table
        rs = DatabaseResultSet.getInventoryResultSet();
        tableModel = (DefaultTableModel) salesTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9), rs.getDouble(10), rs.getString(11)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh sales report jTable
    private void refreshSalesReportTable() {
        // Gets result set of sales report table
        rs = DatabaseResultSet.getSalesReportResultSet();
        tableModel = (DefaultTableModel) salesReportTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getString(5), rs.getDouble(6), rs.getDouble(7), rs.getDouble(8), rs.getDouble(9), rs.getDouble(10), rs.getDouble(11), rs.getString(12), rs.getTimestamp(13)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to refresh installments jTable
    private void refreshInstallmentsTable() {
        // Gets result set of installments table
        rs = DatabaseResultSet.getInstallmentsResultSet();
        tableModel = (DefaultTableModel) installmentsTable.getModel();
        // Remove all rows
        tableModel.setRowCount(0);

        try {
            while (rs.next()) {
                // Add each row to its jTable using tableModel
                tableModel.addRow(new Object[]{rs.getInt(1), rs.getInt(2), rs.getString(3), rs.getString(4), rs.getDouble(5), rs.getDouble(6), rs.getDouble(7), rs.getDouble(8), rs.getInt(9), rs.getInt(10), rs.getDate(11), rs.getTimestamp(12), rs.getString(13)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Method to hide some jComponents at start
    private void setComponentsInvisibleAtstart() {
        settingsButton.setVisible(false);
        statusLabel.setEnabled(false);
        statusComboBox.setEnabled(false);
        monthsLabel.setEnabled(false);
        monthsSpinner.setEnabled(false);
    }

    // Method to populate the brand combo box in inventory panel
    private void populateBrandComboBox() {
        // Initialize an array list
        ArrayList<String> brand = new ArrayList<>();

        try {
            // Connect to the database
            con = DatabaseConnection.connectToDatabase();
            // Select brand column from the inventory table
            ps = con.prepareStatement("SELECT brand FROM inventory");
            // executes the query
            rs = ps.executeQuery();

            // If table is empty
            if (!rs.next()) {
                brand.add("Select...");
                // If table contains data
            } else {
                // do while is used as the cursor moves 1 row in the above if statement
                do {
                    // If the array list is empty
                    if (brand.isEmpty()) {
                        brand.add("Select...");
                        brand.add(rs.getString(1));
                        // If the array list contains data
                    } else {
                        // Boolean variablee to check for uniqueness of the brand
                        boolean sameBrandFound = false;

                        // Loops through th array list
                        for (int i = 0; i < brand.size(); i++) {
                            // If arraylist contains the same brand as the one from the current row in the database
                            if (rs.getString(1).equals(brand.get(i))) {
                                // Boolean value being true indicates that a unique brand is not found
                                sameBrandFound = true;
                                break;
                            }
                        }

                        // If the brand in the current row is a unique brand
                        if (sameBrandFound == false) {
                            brand.add(rs.getString(1));
                        }
                    }
                    // Loops through each row inthe inventory table
                } while (rs.next());
            }
        } catch (SQLException ex) {
            Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {   // Prevents "A lock could not be obtained within the time requested" error
            try {
                rs.close();
                ps.close();
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(MenuUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // Sets the combo box model
        brandComboBox.setModel(new DefaultComboBoxModel<>(brand.toArray(new String[0])));
    }

    // Method to limit the amount of charachters that can be entered into a text field
    private void setJTextFieldLimit() {
        // Users
        userFullNameField.setDocument(new JTextFieldLimit(70));
        usernameField.setDocument(new JTextFieldLimit(15));
        passwordField.setDocument(new JTextFieldLimit(30));
        // Customers
        nidField.setDocument(new JTextFieldLimit(7));
        customerFullNameField.setDocument(new JTextFieldLimit(70));
        addressField.setDocument(new JTextFieldLimit(100));
        phoneNoField.setDocument(new JTextFieldLimit(7));
        emailField.setDocument(new JTextFieldLimit(50));
        accountNoField.setDocument(new JTextFieldLimit(30));
        ridingZoneField.setDocument(new JTextFieldLimit(30));
        // Inventory
        brandField.setDocument(new JTextFieldLimit(40));
        modelNoField.setDocument(new JTextFieldLimit(40));
        chassisNoField.setDocument(new JTextFieldLimit(40));
        engineNoField.setDocument(new JTextFieldLimit(40));
        engineCapacityField.setDocument(new JTextFieldLimit(20));
        colourField.setDocument(new JTextFieldLimit(20));
        priceField.setDocument(new JTextFieldLimit(52));
        // Sales
        paidAmountField.setDocument(new JTextFieldLimit(52));
        //Installments
        installmentsPaidAmountField.setDocument(new JTextFieldLimit(52));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountNoField;
    private javax.swing.JButton addCustomersButton;
    private javax.swing.JButton addMotorcyclesButton;
    private javax.swing.JButton addUsersButton;
    private javax.swing.JTextField addressField;
    private javax.swing.JComboBox<String> brandComboBox;
    private javax.swing.JTextField brandField;
    private javax.swing.JTextField chassisNoField;
    private javax.swing.JButton clearCustomersPanelButton;
    private javax.swing.JButton clearInstallmentPanelButton;
    private javax.swing.JButton clearInventoryPanelButton;
    private javax.swing.JButton clearSalesPanelButton;
    private javax.swing.JButton clearUsersPanelButton;
    private javax.swing.JTextField colourField;
    private javax.swing.JTextField customerFullNameField;
    private javax.swing.JFormattedTextField customerIDField;
    private javax.swing.JButton customersButton;
    private javax.swing.JPanel customersPanel;
    private javax.swing.JScrollPane customersScrollPane;
    private javax.swing.JTable customersTable;
    private javax.swing.JTextField customersTableSearchField;
    private javax.swing.JLabel dateTimeLabel;
    private javax.swing.JButton deleteCustomersButton;
    private javax.swing.JButton deleteMotorcyclesButton;
    private javax.swing.JButton deleteUsersButton;
    private javax.swing.JSpinner discountSpinner;
    private javax.swing.JFormattedTextField dobField;
    private javax.swing.JTextField emailField;
    private javax.swing.JTextField engineCapacityField;
    private javax.swing.JTextField engineNoField;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel homePanel;
    private javax.swing.JScrollPane homeScrollPane;
    private javax.swing.JButton installmentsButton;
    private javax.swing.JTextField installmentsPaidAmountField;
    private javax.swing.JPanel installmentsPanel;
    private javax.swing.JScrollPane installmentsScrollPane;
    private javax.swing.JTable installmentsTable;
    private javax.swing.JTextField installmentsTableSearchField;
    private javax.swing.JButton inventoryButton;
    private javax.swing.JPanel inventoryPanel;
    private javax.swing.JScrollPane inventoryScrollPane;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JTextField inventoryTableSearchField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator10;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JButton loginHistoryButton;
    private javax.swing.JPanel loginHistoryPanel;
    private javax.swing.JTable loginHistoryTable;
    private javax.swing.JTextField loginHistoryTableSearchField;
    private javax.swing.JButton logoutButton;
    private javax.swing.JFormattedTextField manuYearField;
    private javax.swing.JTextField modelNameField;
    private javax.swing.JTextField modelNoField;
    private javax.swing.JLabel monthsLabel;
    private javax.swing.JSpinner monthsSpinner;
    private javax.swing.JTextField nidField;
    private javax.swing.JTextField paidAmountField;
    private javax.swing.JTextField passwordField;
    private javax.swing.JButton payButton;
    private javax.swing.JComboBox<String> payingInComboBox;
    private javax.swing.JTextField phoneNoField;
    private javax.swing.JTextField priceField;
    private javax.swing.JTextField ridingZoneField;
    private javax.swing.JComboBox<String> roleComboBox;
    private javax.swing.JButton salesButton;
    private javax.swing.JPanel salesPanel;
    private javax.swing.JButton salesReportButton;
    private javax.swing.JPanel salesReportPanel;
    private javax.swing.JScrollPane salesReportScrollPane;
    private javax.swing.JTable salesReportTable;
    private javax.swing.JTextField salesReportTableSearchField;
    private javax.swing.JScrollPane salesScrollPane;
    private javax.swing.JTable salesTable;
    private javax.swing.JTextField salesTableSearchField;
    private javax.swing.JButton sellButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JScrollPane settingsScrollPane;
    private javax.swing.JPanel settingsSwitchPanel;
    private javax.swing.JComboBox<String> statusComboBox;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel switchPanel;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JButton updateCustomersButton;
    private javax.swing.JButton updateMotorcyclesButton;
    private javax.swing.JButton updateUsersButton;
    private javax.swing.JTextField userFullNameField;
    private javax.swing.JLabel userLabel;
    private javax.swing.JTextField usernameField;
    private javax.swing.JButton usersButton;
    private javax.swing.JPanel usersPanel;
    private javax.swing.JTable usersTable;
    private javax.swing.JTextField usersTableSearchField;
    // End of variables declaration//GEN-END:variables
}
